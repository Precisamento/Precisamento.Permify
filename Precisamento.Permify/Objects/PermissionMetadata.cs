using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace Precisamento.Permify.Objects
{
    public class PermissionMetadata
    {
        /// <summary>
        /// The last SnapToken that was generated by this client. Used for caching purposed by Permify.
        /// </summary>
        [JsonPropertyName("snap_token")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? SnapToken { get; set; }

        /// <summary>
        /// The last SchemaVersion that was generated by this client. Used for caching purposed by Permify.
        /// </summary>
        [JsonPropertyName("schema_version")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? SchemaVersion { get; set; }

        /// <summary>
        /// Determines if all relationships or just permissions should be returned by <see cref="IPermifyClient.SubjectPermissionListAsync(PermifyEntity, PermifySubject, PermissionMetadata?, PermissionContext?)"/>.
        /// </summary>
        [JsonPropertyName("only_permission")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? OnlyPermissions { get; set; }

        /// <summary>
        /// The max recursive depth to traverse for the Permify operation. The default is 10.
        /// </summary>
        [JsonPropertyName("depth")]
        public int Depth { get; set; } = 10;
    }
}
